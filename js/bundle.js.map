{"version":3,"file":"bundle.js","mappings":";;;;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAM;AACN;AACA;AACA;AACA;AACA;AACA;AACA,MAAM;AACN;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAU;AACV;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sDAAsD,UAAU;AAChE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA,sDAAsD,UAAU;AAChE;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kBAAkB;AAClB;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA,aAAa;AACb,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc;AACd;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;ACjHA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc;AACd;AACA;AACA;AACA;AACA,+BAA+B,UAAU,MAAM,SAAS;AACxD,sDAAsD,WAAW;AACjE,oDAAoD,WAAW;AAC/D;AACA;AACA;AACA,8DAA8D,WAAW;AACzE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,+CAA+C,IAAI,YAAY,WAAW;AAC1E;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,YAAY;AACZ;AACA,YAAY;AACZ,QAAQ;AACR;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA,aAAa;AACb,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;ACtHA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA,iBAAiB;AACjB;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA,gBAAgB;AAChB,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4DAA4D;AAC5D,4CAA4C,QAAQ;AACpD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;;;;;;;;;;AC1IA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;ACjDA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gCAAgC,cAAc;AAC9C,MAAM;AACN;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sCAAsC,WAAW;AACjD,UAAU;AACV;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;;;;;;;;;;ACvDA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA,KAAK;AACL;AACA;AACA;;;;;;;;;;ACtCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAU;AACV;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uBAAuB,IAAI;AAC3B,UAAU;AACV;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;UCjFA;UACA;;UAEA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;;UAEA;UACA;;UAEA;UACA;UACA;;;;;;;;;;ACtBa;AACb;AACA;AACA,iBAAiB,mBAAO,CAAC,4CAAgB;AACzC,gBAAgB,mBAAO,CAAC,8CAAiB;AACzC,gBAAgB,mBAAO,CAAC,8CAAiB;AACzC,eAAe,mBAAO,CAAC,4CAAgB;AACvC,gBAAgB,mBAAO,CAAC,8CAAiB;AACzC,iBAAiB,mBAAO,CAAC,gDAAkB;AAC3C,gBAAgB,mBAAO,CAAC,8CAAiB;AACzC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC,E","sources":["webpack://food/./js/modules/calc.js","webpack://food/./js/modules/cards.js","webpack://food/./js/modules/forms.js","webpack://food/./js/modules/modal.js","webpack://food/./js/modules/slider.js","webpack://food/./js/modules/tabs.js","webpack://food/./js/modules/timer.js","webpack://food/webpack/bootstrap","webpack://food/./js/script.js"],"sourcesContent":["function calc() {\r\n    // Calc\r\n\r\n    const result = document.querySelector('.calculating__result span');\r\n    let sex, height, weight, age, ratio;\r\n\r\n    if (localStorage.getItem('sex')) {\r\n        sex = localStorage.getItem == 'sex';\r\n    } else {\r\n        sex = 'female';\r\n        localStorage.setItem('sex', 'female');\r\n    }\r\n\r\n    if (localStorage.getItem('ratio')) {\r\n        ratio = localStorage.getItem == 'ratio';\r\n    } else {\r\n        ratio = 1.375;\r\n        localStorage.setItem('ratio', 1.375);\r\n    }\r\n\r\n    function calcTotal() {\r\n        if (!sex || !height || !weight || !age || !ratio) {\r\n            result.textContent = '____';\r\n            return;\r\n        }\r\n\r\n        if (sex === 'female') {\r\n            result.textContent = Math.round((447.6 + (9.2 * weight) + (3.1 * height) - (4.3 * age)) * ratio);\r\n        } else {\r\n            result.textContent = Math.round((88.36 + (13.4 * weight) + (4.8 * height) - (5.7 * age)) * ratio);\r\n        }\r\n    }\r\n\r\n    calcTotal();\r\n\r\n    function initLocalSetting(selector, activeClass) {\r\n        const elements = document.querySelectorAll(`${selector} div`);\r\n\r\n        elements.forEach(elem => {\r\n            elem.classList.remove(activeClass);\r\n\r\n            if (elem.getAttribute('id') === localStorage.getItem('sex')) {\r\n                elem.classList.add(activeClass);\r\n            }\r\n            if (elem.getAttribute('data-ratio') === localStorage.getItem('ratio')) {\r\n                elem.classList.add(activeClass);\r\n            }\r\n        });\r\n    }\r\n\r\n    initLocalSetting('#gender', 'calculating__choose-item_active');\r\n    initLocalSetting('.calculating__choose_big', 'calculating__choose-item_active');\r\n\r\n    function getStaticInformation(selector, activeClass) {\r\n        const elements = document.querySelectorAll(`${selector} div`);\r\n\r\n        elements.forEach(elem => {\r\n            elem.addEventListener('click', (e) => {\r\n                if (e.target.getAttribute('data-ratio')) {\r\n                    // Куда будет произведен клик, те дынные из data-атрибута будут получены\r\n                    ratio = +e.target.getAttribute('data-ratio');\r\n                    localStorage.setItem('ratio', +e.target.getAttribute('data-ratio'));\r\n                } else {\r\n                    sex = e.target.getAttribute('id');\r\n                    localStorage.setItem('sex', e.target.getAttribute('id'));\r\n                }\r\n\r\n                elements.forEach(elem => {\r\n                    elem.classList.remove(activeClass);\r\n                });\r\n\r\n                e.target.classList.add(activeClass);\r\n\r\n                calcTotal();\r\n            });\r\n        });\r\n    }\r\n\r\n    getStaticInformation('#gender', 'calculating__choose-item_active');\r\n    getStaticInformation('.calculating__choose_big', 'calculating__choose-item_active');\r\n\r\n    function getDynemicInformation(selector) {\r\n        const input = document.querySelector(selector);\r\n\r\n        input.addEventListener('input', () => {\r\n\r\n            if (input.value.match(/\\D/g)) {\r\n                input.style.border = '1px solid red';\r\n            } else {\r\n                input.style.border = 'none';\r\n            }\r\n\r\n            switch (input.getAttribute('id')) {\r\n                case 'height':\r\n                    height = +input.value;\r\n                    break;\r\n                case 'weight':\r\n                    weight = +input.value;\r\n                    break;\r\n                case 'age':\r\n                    age = +input.value;\r\n                    break;\r\n            }\r\n\r\n            calcTotal();\r\n        });\r\n    }\r\n\r\n    getDynemicInformation('#height');\r\n    getDynemicInformation('#weight');\r\n    getDynemicInformation('#age');\r\n}\r\n\r\nmodule.exports = calc;","function cards() {\r\n    // 4 Cards\r\n\r\n    class MenuCard {\r\n        constructor(src, alt, title, descr, price, parentSelector, ...classes) {\r\n            this.src = src;\r\n            this.alt = alt;\r\n            this.title = title;\r\n            this.descr = descr;\r\n            this.price = price;\r\n            this.classes = classes;\r\n            this.parent = document.querySelector(parentSelector);\r\n            this.transfer = 64;\r\n            this.changeToRUB();\r\n        }\r\n\r\n        changeToRUB() {\r\n            this.price = this.price * this.transfer;\r\n        }\r\n\r\n        render() {\r\n            const element = document.createElement('div');\r\n            // если пользователь не передалл ни один из классов, тогда подставлять класс по умолчанию\r\n            if (this.classes === 0) {\r\n                this.element = 'menu__item';\r\n                element.classList.add(this.element);\r\n            } else {\r\n                this.classes.forEach(className => element.classList.add(className));\r\n            }\r\n\r\n            element.innerHTML = `\r\n                    <img src=${this.src} alt=${this.alt}>\r\n                    <h3 class=\"menu__item-subtitle\">${this.title}</h3>\r\n                    <div class=\"menu__item-descr\">${this.descr}</div>\r\n                    <div class=\"menu__item-divider\"></div>\r\n                    <div class=\"menu__item-price\">\r\n                        <div class=\"menu__item-cost\">Цена:</div>\r\n                        <div class=\"menu__item-total\"><span>${this.price}</span> руб/день</div>\r\n                    </div>\r\n                `;\r\n            this.parent.append(element);\r\n            element.classList.add('menu__item');\r\n            // menuField.append(element);\r\n        }\r\n    }\r\n\r\n    // Создаем ф-цию получения данных от сервера\r\n    const getResource = async url => {\r\n        const res = await fetch(url);\r\n\r\n        if (!res.ok) {\r\n            throw new Error(`Could not fetch ${url}, status: ${res.status}`);\r\n        }\r\n\r\n        return await res.json();\r\n    };\r\n\r\n    // Вызываем ф-цию\r\n    // getResource('http://localhost:3000/menu')\r\n    // .then(data => {\r\n    //     data.forEach(({\r\n    //         img,\r\n    //         altimg,\r\n    //         title,\r\n    //         descr,\r\n    //         price\r\n    //     }) => {\r\n    //         new MenuCard(img, altimg, title, descr, price, '.menu .container').render();\r\n    //     });\r\n    // });\r\n\r\n    // Используем библиотеку Axios для получения GET запроса\r\n    axios.get('http://localhost:3000/menu')\r\n        .then(item => {\r\n            item.data.forEach(({\r\n                img,\r\n                altimg,\r\n                title,\r\n                descr,\r\n                price\r\n            }) => {\r\n                new MenuCard(img, altimg, title, descr, price, '.menu .container').render();\r\n            });\r\n        });\r\n\r\n    // Статичный способ создания карточек:\r\n    // const menuFit = new MenuCard(\r\n    //     '../img/tabs/vegy.jpg',\r\n    //     'vegy',\r\n    //     'Меню \"Фитнес\"',\r\n    //     'Меню \"Фитнес\" - это новый подход к приготовлению блюд: больше свежих овощей и фруктов. Продукт активных и здоровых людей. Это абсолютно новый продукт с оптимальной ценой и высоким качеством!',\r\n    //     14,\r\n    //     '.menu .container'\r\n    // );\r\n    // const menuElit = new MenuCard(\r\n    //     '../img/tabs/elite.jpg',\r\n    //     'vegy',\r\n    //     'Меню \"Премиум\"',\r\n    //     'В меню “Премиум” мы используем не только красивый дизайн упаковки, но и качественное исполнение блюд. Красная рыба, морепродукты, фрукты - ресторанное меню без похода в ресторан!',\r\n    //     24,\r\n    //     '.menu .container',\r\n    //     'menu__item'\r\n    // );\r\n    // const menuPost = new MenuCard(\r\n    //     '../img/tabs/post.jpg',\r\n    //     'vegy',\r\n    //     'Меню \"Постное\"',\r\n    //     'Меню “Постное” - это тщательный подбор ингредиентов: полное отсутствие продуктов животного происхождения, овса, кокоса или гречки, правильное количество белков за счет тофу и импортных вегетарианских стейков.',\r\n    //     9,\r\n    //     '.menu .container',\r\n    //     'menu__item'\r\n    // );\r\n\r\n    // menuFit.render();\r\n    // menuElit.render();\r\n    // menuPost.render();\r\n}\r\n\r\nmodule.exports = cards;","function forms() {\r\n    // Forms\r\n\r\n    const forms = document.querySelectorAll('form');\r\n\r\n    // Создаем объект со списком фраз для вывода в различных ситуациях\r\n    const message = {\r\n        loading: 'img/form/spinner.svg',\r\n        success: 'Спасибо! Скоро мы с вами свяжемся',\r\n        failure: 'Что-то пошло не так...'\r\n    };\r\n\r\n    // Запускаем перебор, что бы все формы на странице работали одинакого\r\n    forms.forEach(item => {\r\n        bindPostData(item);\r\n    });\r\n\r\n    const postData = async (url, data) => {\r\n        const res = await fetch(url, {\r\n            method: 'POST',\r\n            body: data,\r\n            headers: {\r\n                'Content-type': 'application/json'\r\n            }\r\n        });\r\n\r\n        return await res.json();\r\n    };\r\n    // Создаем ф-цию для отправки данных на сервер\r\n    function bindPostData(form) {\r\n        form.addEventListener('submit', (e) => {\r\n            // Отмена стандартного поведения браузера\r\n            e.preventDefault();\r\n\r\n            // Создаем элемент который будет отображать статус запроса на странице\r\n            const statusMessage = document.createElement('img');\r\n            statusMessage.src = message.loading;\r\n            statusMessage.style.cssText = `\r\n                display: block;\r\n                margin: 0 auto;\r\n            `;\r\n            // showThanksModal(message.loading);\r\n            // Выводим статус загрузки данных при обмене с сервером\r\n            // form.append(statusMessage);\r\n            form.insertAdjacentElement('afterend', statusMessage);\r\n\r\n            // Создаем запрос\r\n            // const request = new XMLHttpRequest();\r\n            // Используем метод open что бы настроить этот запрос, указав метод отправки данных POST и ссылку на сервер URL\r\n            // request.open('POST', 'server.php');\r\n            // Есть два способа конвертации данных - FormData и JSON\r\n            // Используем FormData для конвертации данных (из формы) введенных пользователем, в объект\r\n            // Важно что бы в верстке в form у элементов данные с которых будут идти на сервер (input, option, textaria и т.д.) был указан атрибут name=\"\", иначе FormData не сможет найти этот элемент и взять его value\r\n\r\n            // При использовании FormData без конвертации в JSON не нужно использовать метод setRequestHeader, он прописывается автоматически\r\n            // request.setRequestHeader('Content-type', 'multipart/form-data');\r\n            // Для формата JSON заголовок нужен, хотя без него тоже все работает\r\n            // request.setRequestHeader('Content-type', 'application/json');\r\n            // Создаем объект FormData в который будут записываться данные введенные пользователем в form\r\n            const formData = new FormData(form);\r\n\r\n            // ! Вариант с использованием JSON\r\n            // Поскольку FormData спецефический объект, создаем обычный объект - перебираем св-ва и значения записаные в FormData - записываем их в новый объект \r\n            // Старый способ\r\n            // let object = {};\r\n\r\n            // formData.forEach((value, key) => {\r\n            //     object[key] = value;\r\n            // });\r\n\r\n            // Современный способ\r\n            // Сначала преобразует firmData в матрицу (масивы в массиве), а потом обратно в обычный объект\r\n            const json = JSON.stringify(Object.fromEntries(formData.entries()));\r\n\r\n            // Вызываем метод send (отправка) и указываем новосозданный объект formData которая была создана во время заполнения клиентом формы\r\n            // request.send(formData);\r\n            // Отправляем на сервер объект в формате JSON\r\n            // request.send(JSON.stringify(object));\r\n\r\n            // Используем современную технологию работы с сервером fetch API\r\n            postData('http://localhost:3000/requests', json)\r\n                .then(data => {\r\n                    console.log(data);\r\n                    showThanksModal(message.success);\r\n                    statusMessage.remove();\r\n                })\r\n                .catch(() => {\r\n                    showThanksModal(message.failure);\r\n                })\r\n                .finally(() => {\r\n                    form.reset();\r\n                });\r\n\r\n            // Навешиваем обработчик событий на запрос, говорим что отслеживаем 'load' - конечную загрузку нашего запроса\r\n            // request.addEventListener('load', () => {\r\n            //     // Проверяем наш запрос на готовность (200)\r\n            //     if (request.status === 200) {\r\n            //         // Смотрим в консоли свойство response (ответ) на запрос\r\n            //         console.log(request.response);\r\n            //         // Выводим статус успешной загрузки данных при обмене с сервером\r\n            //         // statusMessage.textContent = message.success;\r\n            //         showThanksModal(message.success);\r\n            //         // Очистить форму от введенных данных\r\n            //         form.reset();\r\n            //         statusMessage.remove();\r\n            //     } else {\r\n            //         // Выводим статус ошибки при загрузке данных при обмене с сервером\r\n            //         // statusMessage.textContent = message.failure;\r\n            //         showThanksModal(message.failure);\r\n            //     }\r\n            // });\r\n        });\r\n    }\r\n\r\n    function showThanksModal(message) {\r\n        const prevModalDialog = document.querySelector('.modal__dialog');\r\n\r\n        prevModalDialog.hidden = true;\r\n        openModalWindow();\r\n\r\n        const thanksModal = document.createElement('div');\r\n        thanksModal.classList.add('modal__dialog');\r\n        thanksModal.innerHTML = `\r\n            <div class=\"modal__content\">\r\n                <div data-close class=\"modal__close\">&times;</div>\r\n                <div class=\"modal__title\">${message}</div>\r\n            </div>  \r\n        `;\r\n        modal.append(thanksModal);\r\n\r\n        setTimeout(() => {\r\n            thanksModal.remove();\r\n            prevModalDialog.hidden = false;\r\n            closeModalWindow();\r\n        }, 3000);\r\n    }\r\n}\r\n\r\nmodule.exports = forms;","function modal() {\r\n\r\n    //  3 Modal\r\n\r\n    const btnsOpen = document.querySelectorAll('[data-modal]'),\r\n        modal = document.querySelector('.modal');\r\n\r\n    function openModalWindow() {\r\n        modal.style.display = 'block';\r\n        document.body.style.overflow = 'hidden';\r\n        // Если пользователь открыл модельное окно сам, тогда таймер отключится\r\n        clearInterval(modalTimerId);\r\n    }\r\n\r\n    function closeModalWindow() {\r\n        modal.style.display = 'none';\r\n        document.body.style.overflow = '';\r\n    }\r\n\r\n    btnsOpen.forEach(btn => {\r\n        btn.addEventListener('click', openModalWindow);\r\n    });\r\n\r\n    modal.addEventListener('click', (e) => {\r\n        if (e.target === modal || e.target.getAttribute('data-close') == '') {\r\n            closeModalWindow();\r\n        }\r\n    });\r\n\r\n    document.addEventListener('keydown', (e) => {\r\n        if (e.code === 'Escape' && modal.style.display === 'block') {\r\n            closeModalWindow();\r\n        }\r\n    });\r\n\r\n    const modalTimerId = setTimeout(openModalWindow, 50000);\r\n\r\n    function showModalByScroll() {\r\n        if (window.pageYOffset + document.documentElement.clientHeight >= document.documentElement.scrollHeight) {\r\n            openModalWindow();\r\n\r\n            window.removeEventListener('scroll', showModalByScroll);\r\n            clearInterval(modalTimerId);\r\n        }\r\n    }\r\n\r\n    window.addEventListener('scroll', showModalByScroll);\r\n}\r\n\r\nmodule.exports = modal;","function slider() {\r\n    // Slider\r\n\r\n    const slides = document.querySelectorAll('.offer__slide'),\r\n        prev = document.querySelector('.offer__slider-prev'),\r\n        next = document.querySelector('.offer__slider-next'),\r\n        // 8) Кол-во слайдов и какой именно номер слайда \r\n        total = document.querySelector('#total'),\r\n        current = document.querySelector('#current');\r\n\r\n    // 1) Создаем индекс для подсчета кол-ва слайдов\r\n    let slideIndex = 1;\r\n    // 7) Запускаем ф-цию с первым слайдером\r\n    showSlides(slideIndex);\r\n    // 8)Показывает общее кол-во слайдов\r\n    if (slides.length < 10) {\r\n        total.textContent = `0${slides.length}`;\r\n    } else {\r\n        total.textContent = slides.length;\r\n    }\r\n\r\n    function showSlides(n) {\r\n        // 2) Если slideIndex превышает кол-во слайдов, устанавливать ему значение первого слайда\r\n        if (n > slides.length) {\r\n            slideIndex = 1;\r\n        }\r\n        // 3) Если slideIndex меньше 1, тогда устанавливать ему значение общего кол-ва слайдов\r\n        if (n < 1) {\r\n            slideIndex = slides.length;\r\n        }\r\n        // 4) Убираем все слайдеры со страницы\r\n        slides.forEach((item) => item.style.display = 'none');\r\n        // 5) Показываем на странице первый слайд\r\n        slides[slideIndex - 1].style.display = 'block';\r\n        // 9) Показывает текущий слайд\r\n        if (slides.length < 10) {\r\n            current.textContent = `0${slideIndex}`;\r\n        } else {\r\n            current.textContent = slideIndex;\r\n        }\r\n    }\r\n    // 6) Ф-ция изменяющая slideIndex (при отрицательном аргументе, будет вычитать индекс)\r\n    function plusSlides(n) {\r\n        showSlides(slideIndex += n);\r\n    }\r\n\r\n    prev.addEventListener('click', () => {\r\n        plusSlides(-1);\r\n    });\r\n\r\n    next.addEventListener('click', () => {\r\n        plusSlides(1);\r\n    });\r\n}\r\n\r\nmodule.exports = slider;","function tabs() {\r\n    // 1 Tabs\r\n\r\n    const tabsParent = document.querySelector('.tabheader__items'),\r\n        tabs = tabsParent.querySelectorAll('.tabheader__item'),\r\n        tabContent = document.querySelectorAll('.tabcontent');\r\n\r\n    function hiddenTabContent() {\r\n        tabContent.forEach(item => {\r\n            item.style.display = 'none';\r\n        });\r\n\r\n        tabs.forEach(item => {\r\n            item.classList.remove('tabheader__item_active');\r\n        });\r\n    }\r\n\r\n    function showTabContent(i = 0) {\r\n        tabContent[i].style.display = 'block';\r\n        tabs[i].classList.add('tabheader__item_active');\r\n    }\r\n\r\n    hiddenTabContent();\r\n    showTabContent();\r\n\r\n    tabsParent.addEventListener('click', (event) => {\r\n        const target = event.target;\r\n        if (target && target.classList.contains('tabheader__item')) {\r\n            tabs.forEach((item, i) => {\r\n                if (target == item) {\r\n                    hiddenTabContent();\r\n                    showTabContent(i);\r\n                }\r\n            });\r\n        }\r\n    });\r\n}\r\n\r\nmodule.exports = tabs;","function timer() {\r\n    // 2 Timer\r\n\r\n    const deadline = \"2023-01-01\";\r\n\r\n    function getTimeRemaining(endtime) {\r\n        let days, hours, minutes, seconds;\r\n        const total = Date.parse(endtime) - Date.parse(new Date());\r\n        // Таким способом мы спарсим (числа из строки переведем в миллисекунды) и вычтем из конечного времени настоящее\r\n        if (total <= 0) {\r\n            days = 0;\r\n            hours = 0;\r\n            minutes = 0;\r\n            seconds = 0;\r\n        } else {\r\n            days = Math.floor(total / (1000 * 60 * 60 * 24));\r\n            // Умножаем 1000 миллисек на 60 - получаем минуту,\r\n            // умножаем минуту на 60 - получаем часы,\r\n            // умножаем часы на 24 - получаем кол-во миллисек в сутках,\r\n            // Делим разницу миллисек между конечным и настоящим временем на кол-во миллисек в сутках - получаем \r\n            // количество дней до deadline\r\n            hours = Math.floor((total / (1000 * 60 * 60)) % 24);\r\n            // (t/(1000*60*60)) - получаем полное количество часов в миллисек в разнице между конечным и настоящим \r\n            // временем, % 24 - получаем остаток часов от оставшихся суток\r\n            minutes = Math.floor((total / 1000 / 60) % 60);\r\n            // (t / 1000 / 60) - получаем кол-во минут\r\n            // % 60 - получаем остаток минут\r\n            seconds = Math.floor((total / 1000) % 60);\r\n            // (t / 1000) - получаем кол-во секунд\r\n            // % 60 - получаем остаток секунд\r\n        }\r\n\r\n        return {\r\n            total,\r\n            days,\r\n            hours,\r\n            minutes,\r\n            seconds\r\n        };\r\n    }\r\n\r\n    // Фу-ция подставляет ноль, когда число меньше 10\r\n\r\n    function getZero(num) {\r\n        if (num >= 0 && num < 10) {\r\n            return `0${num}`;\r\n        } else {\r\n            return num;\r\n        }\r\n    }\r\n\r\n    function setClock(selector, endtime) {\r\n        const timer = document.querySelector(selector),\r\n            days = timer.querySelector('#days'),\r\n            hours = timer.querySelector('#hours'),\r\n            minutes = timer.querySelector('#minutes'),\r\n            seconds = timer.querySelector('#seconds'),\r\n            // Запускает таймер каждую секунду\r\n            timeInterval = setInterval(updateClock, 1000);\r\n\r\n        updateClock();\r\n\r\n        function updateClock() {\r\n            const t = getTimeRemaining(endtime);\r\n\r\n            // Подставляет полученные значения из getTimeRemaining на страницу \r\n            days.innerHTML = getZero(t.days);\r\n            hours.innerHTML = getZero(t.hours);\r\n            minutes.innerHTML = getZero(t.minutes);\r\n            seconds.innerHTML = getZero(t.seconds);\r\n\r\n            // Останавливает таймер, когда он дойдет до нуля\r\n            if (t.total <= 0) {\r\n                clearInterval(timeInterval);\r\n            }\r\n        }\r\n    }\r\n\r\n    setClock('.timer', deadline);\r\n}\r\n\r\nmodule.exports = timer;","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","\"use strict\";\r\n\r\nwindow.addEventListener('DOMContentLoaded', () => {\r\n    const tabs = require('./modules/tabs'),\r\n        modal = require('./modules/modal'),\r\n        forms = require('./modules/forms'),\r\n        calc = require('./modules/calc'),\r\n        cards = require('./modules/cards'),\r\n        slider = require('./modules/slider'),\r\n        timer = require('./modules/timer');\r\n\r\n    tabs();\r\n    modal();\r\n    forms();\r\n    calc();\r\n    cards();\r\n    slider();\r\n    timer();\r\n});"],"names":[],"sourceRoot":""}